<?php

/**
 * @file
 * Provides consolidated management of third-party Composer-compatible packages
 * required by contributed modules.
 */

/**
 * Implements hook_menu().
 */
function composer_manager_menu() {
  $items = array();

  $items['admin/config/system/composer-manager'] = array(
    'title' => 'Composer Manager',
    'description' => 'View the status of packages managed by Composer and configure the location of the composer.json file and verdor directory.',
    'route_name' => 'composer_manager.packages_page',
  );

  return $items;
}

/**
 * Implements hook_menu_link_defaults().
 */
function mymodule_menu_link_defaults() {
  $links = array();

  $links['system.admin.config.system.composer_manager'] = array(
    'link_title' => 'Composer Manager',
    'description' => 'View the status of packages managed by Composer and configure the location of the composer.json file and verdor directory.',
    'parent' => 'system.admin.config.system',
    'route_name' => 'composer_manager.packages_page',
  );

  return $links;
}

/**
 * Implements hook_modules_installed().
 *
 * @see composer_manager_write_if_changed()
 */
function composer_manager_modules_installed($modules) {
  composer_manager_write_if_changed($modules);
}

/**
 * Implements hook_modules_uninstalled().
 *
 * @see composer_manager_write_if_changed()
 */
function composer_manager_modules_uninstalled($modules) {
  composer_manager_write_if_changed($modules);
}

/**
 * Writes the composer.json file if one of the enabled / disabled modules
 * has a composer.json file.
 *
 * This is a primitive check to ensure that the composer.json file is built only
 * when it has changes. This check always passes when run via the command line,
 * as it is assumed that Drush is being used to enable or disable the the
 * modules. A static boolean is also set flagging whether one or more modules
 * being acted on contains a composer.json file, which is used in Drush hooks.
 *
 * @param array $modules
 *   The enabled / disabled modules being scanned for a composer.json file.
 */
function composer_manager_write_if_changed(array $modules) {
  $changed = &drupal_static(__FUNCTION__, FALSE);
  if (Drupal::config('composer_manager.settings')->get('autobuild_file') || drupal_is_cli()) {
    if (composer_manager_has_composer_file($modules)) {
      $changed = TRUE;
      Drupal::service('composer_manager.packages')->writeComposerJson();
    }
  }
}

/**
 * Returns TRUE if at least one module has a composer.json file.
 *
 * @param array $modules
 *   An array of modules being checked.
 *
 * @return boolean
 */
function composer_manager_has_composer_file(array $modules) {
  foreach ($modules as $module) {
    $module_path = drupal_get_path('module', $module);
    if (file_exists($module_path . '/composer.json')) {
      return TRUE;
    }
  }
  return FALSE;
}
