<?php

/**
 * @file
 * Install, update, and uninstall functions for the Composer Manager module.
 */
use Drupal\Core\Url;

/**
 * Implements hook_requirements().
 */
function composer_manager_requirements($phase) {
  if ('runtime' != $phase) {
    return array();
  }

  /* @var $packages Drupal\composer_manager\ComposerPackages */
  $packages = \Drupal::service('composer_manager.packages');
  $manager = $packages->getManager();
  $composer_json = $manager->getComposerJsonFile();

  $requirements = array(
    'composer_manager' => array(
      'title' => t('Composer Manager'),
    ),
  );

  // Change the message slightly if we are on the package status page.
  if ('admin/config/system/composer-manager' == current_path()) {
    $instructions = t('Run <code>drush composer-json-rebuild</code> on the command line or submit the <em>Rebuild composer.json file</em> button on this page to build the file.');
  }
  else {
    $instructions = t('Run <code>drush composer-json-rebuild</code> on the command line or submit the <em>Rebuild composer.json file</em> button on the <a href="@url">package status page</a> to build the file.', array('@url' => Url::fromRoute('composer_manager.packages_page')->toString()));
  }

  if (!$composer_json->exists()) {
    $requirements['composer_manager']['value'] = t('Missing composer.json file');
    $requirements['composer_manager']['description'] = t('The composer.json file was not found.') . '<br/>' . $instructions;
    $requirements['composer_manager']['severity'] = REQUIREMENT_ERROR;
  }
  elseif (!$composer_json->isValidJson()) {
    $requirements['composer_manager']['value'] = t('Invalid composer.json file');
    $requirements['composer_manager']['description'] = t('The composer.json file is invalid.') . '<br/>' . $instructions;
    $requirements['composer_manager']['severity'] = REQUIREMENT_ERROR;
  }
  elseif (!is_file($manager->getAutoloadFilepath())) {
    $requirements['composer_manager']['value'] = t('Dependencies not installed');
    $args = array('!command' => 'install', '@url' => 'http://drupal.org/project/composer_manager');
    $requirements['composer_manager']['description'] = t('Composer\'s <code>!command</code> command must be run to generate the autoloader and install the required packages.<br/>Refer to the instructions on the <a href="@url" target="_blank">Composer Manager project page</a> for installing packages.', $args);
    $requirements['composer_manager']['severity'] = REQUIREMENT_ERROR;
  }
  elseif ($install_required = $packages->getInstallRequired()) {
    $requirements['composer_manager']['value'] = t('Dependencies not installed');
    $args = array('@packages' => join(', ', $install_required), '@url' =>'http://drupal.org/project/composer_manager');
    $requirements['composer_manager']['description'] = t('The following packages must be installed: @packages<br/>Refer to the instructions on the <a href="@url" target="_blank">Composer Manager project page</a> for updating packages.', $args);
    $requirements['composer_manager']['severity'] = REQUIREMENT_ERROR;
  }
  else {
    $requirements['composer_manager']['value'] = t('Dependencies installed');
    $requirements['composer_manager']['description'] =  t('Visit the <a href="@url">package status page</a> to view the status of individual packages.', array('@url' => \Drupal::url('composer_manager.packages_page')));
    $requirements['composer_manager']['severity'] = REQUIREMENT_INFO;
  }

  return $requirements;
}

/**
 * Converts variables to config entries.
 *
 * Implements hook_update_N().
 */
function composer_manager_update_8000() {
  update_variables_to_config('composer_manager.settings', array(
    'composer_manager_autobuild_file' => 'autobuild_file',
    'composer_manager_file_dir' => 'file_dir',
    'composer_manager_vendor_dir' => 'vendor_dir',
    'composer_manager_autobuild_packages' => 'autobuild_packages',
  ));
}
